// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rune/v1/service.proto

package runev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "cthul.io/cthul/pkg/api/rune/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CertificateServiceName is the fully-qualified name of the CertificateService service.
	CertificateServiceName = "rune.v1.CertificateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CertificateServiceGetCertificateProcedure is the fully-qualified name of the CertificateService's
	// GetCertificate RPC.
	CertificateServiceGetCertificateProcedure = "/rune.v1.CertificateService/GetCertificate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	certificateServiceServiceDescriptor              = v1.File_rune_v1_service_proto.Services().ByName("CertificateService")
	certificateServiceGetCertificateMethodDescriptor = certificateServiceServiceDescriptor.Methods().ByName("GetCertificate")
)

// CertificateServiceClient is a client for the rune.v1.CertificateService service.
type CertificateServiceClient interface {
	GetCertificate(context.Context, *connect.Request[v1.GetCertificateRequest]) (*connect.Response[v1.GetCertificateResponse], error)
}

// NewCertificateServiceClient constructs a client for the rune.v1.CertificateService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCertificateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CertificateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &certificateServiceClient{
		getCertificate: connect.NewClient[v1.GetCertificateRequest, v1.GetCertificateResponse](
			httpClient,
			baseURL+CertificateServiceGetCertificateProcedure,
			connect.WithSchema(certificateServiceGetCertificateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// certificateServiceClient implements CertificateServiceClient.
type certificateServiceClient struct {
	getCertificate *connect.Client[v1.GetCertificateRequest, v1.GetCertificateResponse]
}

// GetCertificate calls rune.v1.CertificateService.GetCertificate.
func (c *certificateServiceClient) GetCertificate(ctx context.Context, req *connect.Request[v1.GetCertificateRequest]) (*connect.Response[v1.GetCertificateResponse], error) {
	return c.getCertificate.CallUnary(ctx, req)
}

// CertificateServiceHandler is an implementation of the rune.v1.CertificateService service.
type CertificateServiceHandler interface {
	GetCertificate(context.Context, *connect.Request[v1.GetCertificateRequest]) (*connect.Response[v1.GetCertificateResponse], error)
}

// NewCertificateServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCertificateServiceHandler(svc CertificateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	certificateServiceGetCertificateHandler := connect.NewUnaryHandler(
		CertificateServiceGetCertificateProcedure,
		svc.GetCertificate,
		connect.WithSchema(certificateServiceGetCertificateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/rune.v1.CertificateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CertificateServiceGetCertificateProcedure:
			certificateServiceGetCertificateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCertificateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCertificateServiceHandler struct{}

func (UnimplementedCertificateServiceHandler) GetCertificate(context.Context, *connect.Request[v1.GetCertificateRequest]) (*connect.Response[v1.GetCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rune.v1.CertificateService.GetCertificate is not implemented"))
}
