// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: granit/v1/disk/service.proto

package diskconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	disk "cthul.io/cthul/pkg/api/granit/v1/disk"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DiskServiceName is the fully-qualified name of the DiskService service.
	DiskServiceName = "granit.v1.disk.DiskService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DiskServiceGetProcedure is the fully-qualified name of the DiskService's Get RPC.
	DiskServiceGetProcedure = "/granit.v1.disk.DiskService/Get"
	// DiskServiceListProcedure is the fully-qualified name of the DiskService's List RPC.
	DiskServiceListProcedure = "/granit.v1.disk.DiskService/List"
	// DiskServiceCreateProcedure is the fully-qualified name of the DiskService's Create RPC.
	DiskServiceCreateProcedure = "/granit.v1.disk.DiskService/Create"
	// DiskServiceUpdateProcedure is the fully-qualified name of the DiskService's Update RPC.
	DiskServiceUpdateProcedure = "/granit.v1.disk.DiskService/Update"
	// DiskServiceDeleteProcedure is the fully-qualified name of the DiskService's Delete RPC.
	DiskServiceDeleteProcedure = "/granit.v1.disk.DiskService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	diskServiceServiceDescriptor      = disk.File_granit_v1_disk_service_proto.Services().ByName("DiskService")
	diskServiceGetMethodDescriptor    = diskServiceServiceDescriptor.Methods().ByName("Get")
	diskServiceListMethodDescriptor   = diskServiceServiceDescriptor.Methods().ByName("List")
	diskServiceCreateMethodDescriptor = diskServiceServiceDescriptor.Methods().ByName("Create")
	diskServiceUpdateMethodDescriptor = diskServiceServiceDescriptor.Methods().ByName("Update")
	diskServiceDeleteMethodDescriptor = diskServiceServiceDescriptor.Methods().ByName("Delete")
)

// DiskServiceClient is a client for the granit.v1.disk.DiskService service.
type DiskServiceClient interface {
	Get(context.Context, *connect.Request[disk.GetRequest]) (*connect.Response[disk.GetResponse], error)
	List(context.Context, *connect.Request[disk.ListRequest]) (*connect.Response[disk.ListResponse], error)
	Create(context.Context, *connect.Request[disk.CreateRequest]) (*connect.Response[disk.CreateResponse], error)
	Update(context.Context, *connect.Request[disk.UpdateRequest]) (*connect.Response[disk.UpdateResponse], error)
	Delete(context.Context, *connect.Request[disk.DeleteRequest]) (*connect.Response[disk.DeleteResponse], error)
}

// NewDiskServiceClient constructs a client for the granit.v1.disk.DiskService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDiskServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DiskServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &diskServiceClient{
		get: connect.NewClient[disk.GetRequest, disk.GetResponse](
			httpClient,
			baseURL+DiskServiceGetProcedure,
			connect.WithSchema(diskServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[disk.ListRequest, disk.ListResponse](
			httpClient,
			baseURL+DiskServiceListProcedure,
			connect.WithSchema(diskServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[disk.CreateRequest, disk.CreateResponse](
			httpClient,
			baseURL+DiskServiceCreateProcedure,
			connect.WithSchema(diskServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[disk.UpdateRequest, disk.UpdateResponse](
			httpClient,
			baseURL+DiskServiceUpdateProcedure,
			connect.WithSchema(diskServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[disk.DeleteRequest, disk.DeleteResponse](
			httpClient,
			baseURL+DiskServiceDeleteProcedure,
			connect.WithSchema(diskServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// diskServiceClient implements DiskServiceClient.
type diskServiceClient struct {
	get    *connect.Client[disk.GetRequest, disk.GetResponse]
	list   *connect.Client[disk.ListRequest, disk.ListResponse]
	create *connect.Client[disk.CreateRequest, disk.CreateResponse]
	update *connect.Client[disk.UpdateRequest, disk.UpdateResponse]
	delete *connect.Client[disk.DeleteRequest, disk.DeleteResponse]
}

// Get calls granit.v1.disk.DiskService.Get.
func (c *diskServiceClient) Get(ctx context.Context, req *connect.Request[disk.GetRequest]) (*connect.Response[disk.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls granit.v1.disk.DiskService.List.
func (c *diskServiceClient) List(ctx context.Context, req *connect.Request[disk.ListRequest]) (*connect.Response[disk.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Create calls granit.v1.disk.DiskService.Create.
func (c *diskServiceClient) Create(ctx context.Context, req *connect.Request[disk.CreateRequest]) (*connect.Response[disk.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls granit.v1.disk.DiskService.Update.
func (c *diskServiceClient) Update(ctx context.Context, req *connect.Request[disk.UpdateRequest]) (*connect.Response[disk.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls granit.v1.disk.DiskService.Delete.
func (c *diskServiceClient) Delete(ctx context.Context, req *connect.Request[disk.DeleteRequest]) (*connect.Response[disk.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// DiskServiceHandler is an implementation of the granit.v1.disk.DiskService service.
type DiskServiceHandler interface {
	Get(context.Context, *connect.Request[disk.GetRequest]) (*connect.Response[disk.GetResponse], error)
	List(context.Context, *connect.Request[disk.ListRequest]) (*connect.Response[disk.ListResponse], error)
	Create(context.Context, *connect.Request[disk.CreateRequest]) (*connect.Response[disk.CreateResponse], error)
	Update(context.Context, *connect.Request[disk.UpdateRequest]) (*connect.Response[disk.UpdateResponse], error)
	Delete(context.Context, *connect.Request[disk.DeleteRequest]) (*connect.Response[disk.DeleteResponse], error)
}

// NewDiskServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDiskServiceHandler(svc DiskServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	diskServiceGetHandler := connect.NewUnaryHandler(
		DiskServiceGetProcedure,
		svc.Get,
		connect.WithSchema(diskServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	diskServiceListHandler := connect.NewUnaryHandler(
		DiskServiceListProcedure,
		svc.List,
		connect.WithSchema(diskServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	diskServiceCreateHandler := connect.NewUnaryHandler(
		DiskServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(diskServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	diskServiceUpdateHandler := connect.NewUnaryHandler(
		DiskServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(diskServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	diskServiceDeleteHandler := connect.NewUnaryHandler(
		DiskServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(diskServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/granit.v1.disk.DiskService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DiskServiceGetProcedure:
			diskServiceGetHandler.ServeHTTP(w, r)
		case DiskServiceListProcedure:
			diskServiceListHandler.ServeHTTP(w, r)
		case DiskServiceCreateProcedure:
			diskServiceCreateHandler.ServeHTTP(w, r)
		case DiskServiceUpdateProcedure:
			diskServiceUpdateHandler.ServeHTTP(w, r)
		case DiskServiceDeleteProcedure:
			diskServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDiskServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDiskServiceHandler struct{}

func (UnimplementedDiskServiceHandler) Get(context.Context, *connect.Request[disk.GetRequest]) (*connect.Response[disk.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("granit.v1.disk.DiskService.Get is not implemented"))
}

func (UnimplementedDiskServiceHandler) List(context.Context, *connect.Request[disk.ListRequest]) (*connect.Response[disk.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("granit.v1.disk.DiskService.List is not implemented"))
}

func (UnimplementedDiskServiceHandler) Create(context.Context, *connect.Request[disk.CreateRequest]) (*connect.Response[disk.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("granit.v1.disk.DiskService.Create is not implemented"))
}

func (UnimplementedDiskServiceHandler) Update(context.Context, *connect.Request[disk.UpdateRequest]) (*connect.Response[disk.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("granit.v1.disk.DiskService.Update is not implemented"))
}

func (UnimplementedDiskServiceHandler) Delete(context.Context, *connect.Request[disk.DeleteRequest]) (*connect.Response[disk.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("granit.v1.disk.DiskService.Delete is not implemented"))
}
