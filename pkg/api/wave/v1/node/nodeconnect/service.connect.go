// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wave/v1/node/service.proto

package nodeconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	node "cthul.io/cthul/pkg/api/wave/v1/node"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NodeServiceName is the fully-qualified name of the NodeService service.
	NodeServiceName = "wave.v1.node.NodeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NodeServiceGetProcedure is the fully-qualified name of the NodeService's Get RPC.
	NodeServiceGetProcedure = "/wave.v1.node.NodeService/Get"
	// NodeServiceListProcedure is the fully-qualified name of the NodeService's List RPC.
	NodeServiceListProcedure = "/wave.v1.node.NodeService/List"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	nodeServiceServiceDescriptor    = node.File_wave_v1_node_service_proto.Services().ByName("NodeService")
	nodeServiceGetMethodDescriptor  = nodeServiceServiceDescriptor.Methods().ByName("Get")
	nodeServiceListMethodDescriptor = nodeServiceServiceDescriptor.Methods().ByName("List")
)

// NodeServiceClient is a client for the wave.v1.node.NodeService service.
type NodeServiceClient interface {
	Get(context.Context, *connect.Request[node.GetRequest]) (*connect.Response[node.GetResponse], error)
	List(context.Context, *connect.Request[node.ListRequest]) (*connect.Response[node.ListResponse], error)
}

// NewNodeServiceClient constructs a client for the wave.v1.node.NodeService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NodeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &nodeServiceClient{
		get: connect.NewClient[node.GetRequest, node.GetResponse](
			httpClient,
			baseURL+NodeServiceGetProcedure,
			connect.WithSchema(nodeServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[node.ListRequest, node.ListResponse](
			httpClient,
			baseURL+NodeServiceListProcedure,
			connect.WithSchema(nodeServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// nodeServiceClient implements NodeServiceClient.
type nodeServiceClient struct {
	get  *connect.Client[node.GetRequest, node.GetResponse]
	list *connect.Client[node.ListRequest, node.ListResponse]
}

// Get calls wave.v1.node.NodeService.Get.
func (c *nodeServiceClient) Get(ctx context.Context, req *connect.Request[node.GetRequest]) (*connect.Response[node.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls wave.v1.node.NodeService.List.
func (c *nodeServiceClient) List(ctx context.Context, req *connect.Request[node.ListRequest]) (*connect.Response[node.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// NodeServiceHandler is an implementation of the wave.v1.node.NodeService service.
type NodeServiceHandler interface {
	Get(context.Context, *connect.Request[node.GetRequest]) (*connect.Response[node.GetResponse], error)
	List(context.Context, *connect.Request[node.ListRequest]) (*connect.Response[node.ListResponse], error)
}

// NewNodeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodeServiceHandler(svc NodeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nodeServiceGetHandler := connect.NewUnaryHandler(
		NodeServiceGetProcedure,
		svc.Get,
		connect.WithSchema(nodeServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	nodeServiceListHandler := connect.NewUnaryHandler(
		NodeServiceListProcedure,
		svc.List,
		connect.WithSchema(nodeServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/wave.v1.node.NodeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NodeServiceGetProcedure:
			nodeServiceGetHandler.ServeHTTP(w, r)
		case NodeServiceListProcedure:
			nodeServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNodeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNodeServiceHandler struct{}

func (UnimplementedNodeServiceHandler) Get(context.Context, *connect.Request[node.GetRequest]) (*connect.Response[node.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.node.NodeService.Get is not implemented"))
}

func (UnimplementedNodeServiceHandler) List(context.Context, *connect.Request[node.ListRequest]) (*connect.Response[node.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.node.NodeService.List is not implemented"))
}
