// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wave/v1/domain/service.proto

package domainconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	domain "cthul.io/cthul/pkg/api/wave/v1/domain"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DomainServiceName is the fully-qualified name of the DomainService service.
	DomainServiceName = "wave.v1.domain.DomainService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DomainServiceGetProcedure is the fully-qualified name of the DomainService's Get RPC.
	DomainServiceGetProcedure = "/wave.v1.domain.DomainService/Get"
	// DomainServiceStatProcedure is the fully-qualified name of the DomainService's Stat RPC.
	DomainServiceStatProcedure = "/wave.v1.domain.DomainService/Stat"
	// DomainServiceListProcedure is the fully-qualified name of the DomainService's List RPC.
	DomainServiceListProcedure = "/wave.v1.domain.DomainService/List"
	// DomainServiceCreateProcedure is the fully-qualified name of the DomainService's Create RPC.
	DomainServiceCreateProcedure = "/wave.v1.domain.DomainService/Create"
	// DomainServiceUpdateProcedure is the fully-qualified name of the DomainService's Update RPC.
	DomainServiceUpdateProcedure = "/wave.v1.domain.DomainService/Update"
	// DomainServiceAttachProcedure is the fully-qualified name of the DomainService's Attach RPC.
	DomainServiceAttachProcedure = "/wave.v1.domain.DomainService/Attach"
	// DomainServiceDetachProcedure is the fully-qualified name of the DomainService's Detach RPC.
	DomainServiceDetachProcedure = "/wave.v1.domain.DomainService/Detach"
	// DomainServiceDeleteProcedure is the fully-qualified name of the DomainService's Delete RPC.
	DomainServiceDeleteProcedure = "/wave.v1.domain.DomainService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	domainServiceServiceDescriptor      = domain.File_wave_v1_domain_service_proto.Services().ByName("DomainService")
	domainServiceGetMethodDescriptor    = domainServiceServiceDescriptor.Methods().ByName("Get")
	domainServiceStatMethodDescriptor   = domainServiceServiceDescriptor.Methods().ByName("Stat")
	domainServiceListMethodDescriptor   = domainServiceServiceDescriptor.Methods().ByName("List")
	domainServiceCreateMethodDescriptor = domainServiceServiceDescriptor.Methods().ByName("Create")
	domainServiceUpdateMethodDescriptor = domainServiceServiceDescriptor.Methods().ByName("Update")
	domainServiceAttachMethodDescriptor = domainServiceServiceDescriptor.Methods().ByName("Attach")
	domainServiceDetachMethodDescriptor = domainServiceServiceDescriptor.Methods().ByName("Detach")
	domainServiceDeleteMethodDescriptor = domainServiceServiceDescriptor.Methods().ByName("Delete")
)

// DomainServiceClient is a client for the wave.v1.domain.DomainService service.
type DomainServiceClient interface {
	Get(context.Context, *connect.Request[domain.GetRequest]) (*connect.Response[domain.GetResponse], error)
	Stat(context.Context, *connect.Request[domain.StatRequest]) (*connect.Response[domain.StatResponse], error)
	List(context.Context, *connect.Request[domain.ListRequest]) (*connect.Response[domain.ListResponse], error)
	Create(context.Context, *connect.Request[domain.CreateRequest]) (*connect.Response[domain.CreateResponse], error)
	Update(context.Context, *connect.Request[domain.UpdateRequest]) (*connect.Response[domain.UpdateResponse], error)
	Attach(context.Context, *connect.Request[domain.AttachRequest]) (*connect.Response[domain.AttachResponse], error)
	Detach(context.Context, *connect.Request[domain.DetachRequest]) (*connect.Response[domain.DetachResponse], error)
	Delete(context.Context, *connect.Request[domain.DeleteRequest]) (*connect.Response[domain.DeleteResponse], error)
}

// NewDomainServiceClient constructs a client for the wave.v1.domain.DomainService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDomainServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DomainServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &domainServiceClient{
		get: connect.NewClient[domain.GetRequest, domain.GetResponse](
			httpClient,
			baseURL+DomainServiceGetProcedure,
			connect.WithSchema(domainServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stat: connect.NewClient[domain.StatRequest, domain.StatResponse](
			httpClient,
			baseURL+DomainServiceStatProcedure,
			connect.WithSchema(domainServiceStatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[domain.ListRequest, domain.ListResponse](
			httpClient,
			baseURL+DomainServiceListProcedure,
			connect.WithSchema(domainServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[domain.CreateRequest, domain.CreateResponse](
			httpClient,
			baseURL+DomainServiceCreateProcedure,
			connect.WithSchema(domainServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[domain.UpdateRequest, domain.UpdateResponse](
			httpClient,
			baseURL+DomainServiceUpdateProcedure,
			connect.WithSchema(domainServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		attach: connect.NewClient[domain.AttachRequest, domain.AttachResponse](
			httpClient,
			baseURL+DomainServiceAttachProcedure,
			connect.WithSchema(domainServiceAttachMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		detach: connect.NewClient[domain.DetachRequest, domain.DetachResponse](
			httpClient,
			baseURL+DomainServiceDetachProcedure,
			connect.WithSchema(domainServiceDetachMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[domain.DeleteRequest, domain.DeleteResponse](
			httpClient,
			baseURL+DomainServiceDeleteProcedure,
			connect.WithSchema(domainServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// domainServiceClient implements DomainServiceClient.
type domainServiceClient struct {
	get    *connect.Client[domain.GetRequest, domain.GetResponse]
	stat   *connect.Client[domain.StatRequest, domain.StatResponse]
	list   *connect.Client[domain.ListRequest, domain.ListResponse]
	create *connect.Client[domain.CreateRequest, domain.CreateResponse]
	update *connect.Client[domain.UpdateRequest, domain.UpdateResponse]
	attach *connect.Client[domain.AttachRequest, domain.AttachResponse]
	detach *connect.Client[domain.DetachRequest, domain.DetachResponse]
	delete *connect.Client[domain.DeleteRequest, domain.DeleteResponse]
}

// Get calls wave.v1.domain.DomainService.Get.
func (c *domainServiceClient) Get(ctx context.Context, req *connect.Request[domain.GetRequest]) (*connect.Response[domain.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Stat calls wave.v1.domain.DomainService.Stat.
func (c *domainServiceClient) Stat(ctx context.Context, req *connect.Request[domain.StatRequest]) (*connect.Response[domain.StatResponse], error) {
	return c.stat.CallUnary(ctx, req)
}

// List calls wave.v1.domain.DomainService.List.
func (c *domainServiceClient) List(ctx context.Context, req *connect.Request[domain.ListRequest]) (*connect.Response[domain.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Create calls wave.v1.domain.DomainService.Create.
func (c *domainServiceClient) Create(ctx context.Context, req *connect.Request[domain.CreateRequest]) (*connect.Response[domain.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls wave.v1.domain.DomainService.Update.
func (c *domainServiceClient) Update(ctx context.Context, req *connect.Request[domain.UpdateRequest]) (*connect.Response[domain.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Attach calls wave.v1.domain.DomainService.Attach.
func (c *domainServiceClient) Attach(ctx context.Context, req *connect.Request[domain.AttachRequest]) (*connect.Response[domain.AttachResponse], error) {
	return c.attach.CallUnary(ctx, req)
}

// Detach calls wave.v1.domain.DomainService.Detach.
func (c *domainServiceClient) Detach(ctx context.Context, req *connect.Request[domain.DetachRequest]) (*connect.Response[domain.DetachResponse], error) {
	return c.detach.CallUnary(ctx, req)
}

// Delete calls wave.v1.domain.DomainService.Delete.
func (c *domainServiceClient) Delete(ctx context.Context, req *connect.Request[domain.DeleteRequest]) (*connect.Response[domain.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// DomainServiceHandler is an implementation of the wave.v1.domain.DomainService service.
type DomainServiceHandler interface {
	Get(context.Context, *connect.Request[domain.GetRequest]) (*connect.Response[domain.GetResponse], error)
	Stat(context.Context, *connect.Request[domain.StatRequest]) (*connect.Response[domain.StatResponse], error)
	List(context.Context, *connect.Request[domain.ListRequest]) (*connect.Response[domain.ListResponse], error)
	Create(context.Context, *connect.Request[domain.CreateRequest]) (*connect.Response[domain.CreateResponse], error)
	Update(context.Context, *connect.Request[domain.UpdateRequest]) (*connect.Response[domain.UpdateResponse], error)
	Attach(context.Context, *connect.Request[domain.AttachRequest]) (*connect.Response[domain.AttachResponse], error)
	Detach(context.Context, *connect.Request[domain.DetachRequest]) (*connect.Response[domain.DetachResponse], error)
	Delete(context.Context, *connect.Request[domain.DeleteRequest]) (*connect.Response[domain.DeleteResponse], error)
}

// NewDomainServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDomainServiceHandler(svc DomainServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	domainServiceGetHandler := connect.NewUnaryHandler(
		DomainServiceGetProcedure,
		svc.Get,
		connect.WithSchema(domainServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceStatHandler := connect.NewUnaryHandler(
		DomainServiceStatProcedure,
		svc.Stat,
		connect.WithSchema(domainServiceStatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceListHandler := connect.NewUnaryHandler(
		DomainServiceListProcedure,
		svc.List,
		connect.WithSchema(domainServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceCreateHandler := connect.NewUnaryHandler(
		DomainServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(domainServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceUpdateHandler := connect.NewUnaryHandler(
		DomainServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(domainServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceAttachHandler := connect.NewUnaryHandler(
		DomainServiceAttachProcedure,
		svc.Attach,
		connect.WithSchema(domainServiceAttachMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceDetachHandler := connect.NewUnaryHandler(
		DomainServiceDetachProcedure,
		svc.Detach,
		connect.WithSchema(domainServiceDetachMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceDeleteHandler := connect.NewUnaryHandler(
		DomainServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(domainServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/wave.v1.domain.DomainService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DomainServiceGetProcedure:
			domainServiceGetHandler.ServeHTTP(w, r)
		case DomainServiceStatProcedure:
			domainServiceStatHandler.ServeHTTP(w, r)
		case DomainServiceListProcedure:
			domainServiceListHandler.ServeHTTP(w, r)
		case DomainServiceCreateProcedure:
			domainServiceCreateHandler.ServeHTTP(w, r)
		case DomainServiceUpdateProcedure:
			domainServiceUpdateHandler.ServeHTTP(w, r)
		case DomainServiceAttachProcedure:
			domainServiceAttachHandler.ServeHTTP(w, r)
		case DomainServiceDetachProcedure:
			domainServiceDetachHandler.ServeHTTP(w, r)
		case DomainServiceDeleteProcedure:
			domainServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDomainServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDomainServiceHandler struct{}

func (UnimplementedDomainServiceHandler) Get(context.Context, *connect.Request[domain.GetRequest]) (*connect.Response[domain.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.domain.DomainService.Get is not implemented"))
}

func (UnimplementedDomainServiceHandler) Stat(context.Context, *connect.Request[domain.StatRequest]) (*connect.Response[domain.StatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.domain.DomainService.Stat is not implemented"))
}

func (UnimplementedDomainServiceHandler) List(context.Context, *connect.Request[domain.ListRequest]) (*connect.Response[domain.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.domain.DomainService.List is not implemented"))
}

func (UnimplementedDomainServiceHandler) Create(context.Context, *connect.Request[domain.CreateRequest]) (*connect.Response[domain.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.domain.DomainService.Create is not implemented"))
}

func (UnimplementedDomainServiceHandler) Update(context.Context, *connect.Request[domain.UpdateRequest]) (*connect.Response[domain.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.domain.DomainService.Update is not implemented"))
}

func (UnimplementedDomainServiceHandler) Attach(context.Context, *connect.Request[domain.AttachRequest]) (*connect.Response[domain.AttachResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.domain.DomainService.Attach is not implemented"))
}

func (UnimplementedDomainServiceHandler) Detach(context.Context, *connect.Request[domain.DetachRequest]) (*connect.Response[domain.DetachResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.domain.DomainService.Detach is not implemented"))
}

func (UnimplementedDomainServiceHandler) Delete(context.Context, *connect.Request[domain.DeleteRequest]) (*connect.Response[domain.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.domain.DomainService.Delete is not implemented"))
}
