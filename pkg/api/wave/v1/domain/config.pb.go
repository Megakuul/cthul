// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: wave/v1/domain/config.proto

package domain

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DomainState int32

const (
	DomainState_DOMAIN_STATE_UNSPECIFIED DomainState = 0
	DomainState_DOMAIN_STATE_UP          DomainState = 1
	DomainState_DOMAIN_STATE_PAUSE       DomainState = 2
	DomainState_DOMAIN_STATE_DOWN        DomainState = 3
	DomainState_DOMAIN_STATE_FORCED_DOWN DomainState = 4
)

// Enum value maps for DomainState.
var (
	DomainState_name = map[int32]string{
		0: "DOMAIN_STATE_UNSPECIFIED",
		1: "DOMAIN_STATE_UP",
		2: "DOMAIN_STATE_PAUSE",
		3: "DOMAIN_STATE_DOWN",
		4: "DOMAIN_STATE_FORCED_DOWN",
	}
	DomainState_value = map[string]int32{
		"DOMAIN_STATE_UNSPECIFIED": 0,
		"DOMAIN_STATE_UP":          1,
		"DOMAIN_STATE_PAUSE":       2,
		"DOMAIN_STATE_DOWN":        3,
		"DOMAIN_STATE_FORCED_DOWN": 4,
	}
)

func (x DomainState) Enum() *DomainState {
	p := new(DomainState)
	*p = x
	return p
}

func (x DomainState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DomainState) Descriptor() protoreflect.EnumDescriptor {
	return file_wave_v1_domain_config_proto_enumTypes[0].Descriptor()
}

func (DomainState) Type() protoreflect.EnumType {
	return &file_wave_v1_domain_config_proto_enumTypes[0]
}

func (x DomainState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DomainState.Descriptor instead.
func (DomainState) EnumDescriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{0}
}

type ArchOption int32

const (
	ArchOption_ARCH_OPTION_UNSPECIFIED ArchOption = 0
	ArchOption_ARCH_OPTION_AMD64       ArchOption = 1
	ArchOption_ARCH_OPTION_AARCH64     ArchOption = 2
)

// Enum value maps for ArchOption.
var (
	ArchOption_name = map[int32]string{
		0: "ARCH_OPTION_UNSPECIFIED",
		1: "ARCH_OPTION_AMD64",
		2: "ARCH_OPTION_AARCH64",
	}
	ArchOption_value = map[string]int32{
		"ARCH_OPTION_UNSPECIFIED": 0,
		"ARCH_OPTION_AMD64":       1,
		"ARCH_OPTION_AARCH64":     2,
	}
)

func (x ArchOption) Enum() *ArchOption {
	p := new(ArchOption)
	*p = x
	return p
}

func (x ArchOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArchOption) Descriptor() protoreflect.EnumDescriptor {
	return file_wave_v1_domain_config_proto_enumTypes[1].Descriptor()
}

func (ArchOption) Type() protoreflect.EnumType {
	return &file_wave_v1_domain_config_proto_enumTypes[1]
}

func (x ArchOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArchOption.Descriptor instead.
func (ArchOption) EnumDescriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{1}
}

type ChipsetOption int32

const (
	ChipsetOption_CHIPSET_OPTION_UNSPECIFIED ChipsetOption = 0
	ChipsetOption_CHIPSET_OPTION_I440FX      ChipsetOption = 1
	ChipsetOption_CHIPSET_OPTION_Q35         ChipsetOption = 2
	ChipsetOption_CHIPSET_OPTION_VIRT        ChipsetOption = 3
)

// Enum value maps for ChipsetOption.
var (
	ChipsetOption_name = map[int32]string{
		0: "CHIPSET_OPTION_UNSPECIFIED",
		1: "CHIPSET_OPTION_I440FX",
		2: "CHIPSET_OPTION_Q35",
		3: "CHIPSET_OPTION_VIRT",
	}
	ChipsetOption_value = map[string]int32{
		"CHIPSET_OPTION_UNSPECIFIED": 0,
		"CHIPSET_OPTION_I440FX":      1,
		"CHIPSET_OPTION_Q35":         2,
		"CHIPSET_OPTION_VIRT":        3,
	}
)

func (x ChipsetOption) Enum() *ChipsetOption {
	p := new(ChipsetOption)
	*p = x
	return p
}

func (x ChipsetOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChipsetOption) Descriptor() protoreflect.EnumDescriptor {
	return file_wave_v1_domain_config_proto_enumTypes[2].Descriptor()
}

func (ChipsetOption) Type() protoreflect.EnumType {
	return &file_wave_v1_domain_config_proto_enumTypes[2]
}

func (x ChipsetOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChipsetOption.Descriptor instead.
func (ChipsetOption) EnumDescriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{2}
}

type FirmwareOption int32

const (
	FirmwareOption_FIRMWARE_OPTION_UNSPECIFIED FirmwareOption = 0
	FirmwareOption_FIRMWARE_OPTION_OVMF        FirmwareOption = 1
	FirmwareOption_FIRMWARE_OPTION_SEABIOS     FirmwareOption = 2
)

// Enum value maps for FirmwareOption.
var (
	FirmwareOption_name = map[int32]string{
		0: "FIRMWARE_OPTION_UNSPECIFIED",
		1: "FIRMWARE_OPTION_OVMF",
		2: "FIRMWARE_OPTION_SEABIOS",
	}
	FirmwareOption_value = map[string]int32{
		"FIRMWARE_OPTION_UNSPECIFIED": 0,
		"FIRMWARE_OPTION_OVMF":        1,
		"FIRMWARE_OPTION_SEABIOS":     2,
	}
)

func (x FirmwareOption) Enum() *FirmwareOption {
	p := new(FirmwareOption)
	*p = x
	return p
}

func (x FirmwareOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FirmwareOption) Descriptor() protoreflect.EnumDescriptor {
	return file_wave_v1_domain_config_proto_enumTypes[3].Descriptor()
}

func (FirmwareOption) Type() protoreflect.EnumType {
	return &file_wave_v1_domain_config_proto_enumTypes[3]
}

func (x FirmwareOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FirmwareOption.Descriptor instead.
func (FirmwareOption) EnumDescriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{3}
}

type VideoOption int32

const (
	VideoOption_VIDEO_OPTION_UNSPECIFIED VideoOption = 0
	VideoOption_VIDEO_OPTION_VGA         VideoOption = 1
	VideoOption_VIDEO_OPTION_QXL         VideoOption = 2
	VideoOption_VIDEO_OPTION_HOST        VideoOption = 3
	VideoOption_VIDEO_OPTION_NONE        VideoOption = 4
)

// Enum value maps for VideoOption.
var (
	VideoOption_name = map[int32]string{
		0: "VIDEO_OPTION_UNSPECIFIED",
		1: "VIDEO_OPTION_VGA",
		2: "VIDEO_OPTION_QXL",
		3: "VIDEO_OPTION_HOST",
		4: "VIDEO_OPTION_NONE",
	}
	VideoOption_value = map[string]int32{
		"VIDEO_OPTION_UNSPECIFIED": 0,
		"VIDEO_OPTION_VGA":         1,
		"VIDEO_OPTION_QXL":         2,
		"VIDEO_OPTION_HOST":        3,
		"VIDEO_OPTION_NONE":        4,
	}
)

func (x VideoOption) Enum() *VideoOption {
	p := new(VideoOption)
	*p = x
	return p
}

func (x VideoOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoOption) Descriptor() protoreflect.EnumDescriptor {
	return file_wave_v1_domain_config_proto_enumTypes[4].Descriptor()
}

func (VideoOption) Type() protoreflect.EnumType {
	return &file_wave_v1_domain_config_proto_enumTypes[4]
}

func (x VideoOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoOption.Descriptor instead.
func (VideoOption) EnumDescriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{4}
}

type SerialBus int32

const (
	SerialBus_SERIAL_BUS_UNSPECIFIED SerialBus = 0
	SerialBus_SERIAL_BUS_ISA         SerialBus = 1
	SerialBus_SERIAL_BUS_VIRTIO      SerialBus = 2
)

// Enum value maps for SerialBus.
var (
	SerialBus_name = map[int32]string{
		0: "SERIAL_BUS_UNSPECIFIED",
		1: "SERIAL_BUS_ISA",
		2: "SERIAL_BUS_VIRTIO",
	}
	SerialBus_value = map[string]int32{
		"SERIAL_BUS_UNSPECIFIED": 0,
		"SERIAL_BUS_ISA":         1,
		"SERIAL_BUS_VIRTIO":      2,
	}
)

func (x SerialBus) Enum() *SerialBus {
	p := new(SerialBus)
	*p = x
	return p
}

func (x SerialBus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SerialBus) Descriptor() protoreflect.EnumDescriptor {
	return file_wave_v1_domain_config_proto_enumTypes[5].Descriptor()
}

func (SerialBus) Type() protoreflect.EnumType {
	return &file_wave_v1_domain_config_proto_enumTypes[5]
}

func (x SerialBus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SerialBus.Descriptor instead.
func (SerialBus) EnumDescriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{5}
}

type InputType int32

const (
	InputType_INPUT_TYPE_UNSPECIFIED InputType = 0
	InputType_INPUT_TYPE_MOUSE       InputType = 1
	InputType_INPUT_TYPE_TABLET      InputType = 2
	InputType_INPUT_TYPE_KEYBOARD    InputType = 3
)

// Enum value maps for InputType.
var (
	InputType_name = map[int32]string{
		0: "INPUT_TYPE_UNSPECIFIED",
		1: "INPUT_TYPE_MOUSE",
		2: "INPUT_TYPE_TABLET",
		3: "INPUT_TYPE_KEYBOARD",
	}
	InputType_value = map[string]int32{
		"INPUT_TYPE_UNSPECIFIED": 0,
		"INPUT_TYPE_MOUSE":       1,
		"INPUT_TYPE_TABLET":      2,
		"INPUT_TYPE_KEYBOARD":    3,
	}
)

func (x InputType) Enum() *InputType {
	p := new(InputType)
	*p = x
	return p
}

func (x InputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputType) Descriptor() protoreflect.EnumDescriptor {
	return file_wave_v1_domain_config_proto_enumTypes[6].Descriptor()
}

func (InputType) Type() protoreflect.EnumType {
	return &file_wave_v1_domain_config_proto_enumTypes[6]
}

func (x InputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputType.Descriptor instead.
func (InputType) EnumDescriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{6}
}

type InputBus int32

const (
	InputBus_INPUT_BUS_UNSPECIFIED InputBus = 0
	InputBus_INPUT_BUS_PS2         InputBus = 1
	InputBus_INPUT_BUS_USB         InputBus = 2
	InputBus_INPUT_BUS_VIRTIO      InputBus = 3
)

// Enum value maps for InputBus.
var (
	InputBus_name = map[int32]string{
		0: "INPUT_BUS_UNSPECIFIED",
		1: "INPUT_BUS_PS2",
		2: "INPUT_BUS_USB",
		3: "INPUT_BUS_VIRTIO",
	}
	InputBus_value = map[string]int32{
		"INPUT_BUS_UNSPECIFIED": 0,
		"INPUT_BUS_PS2":         1,
		"INPUT_BUS_USB":         2,
		"INPUT_BUS_VIRTIO":      3,
	}
)

func (x InputBus) Enum() *InputBus {
	p := new(InputBus)
	*p = x
	return p
}

func (x InputBus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputBus) Descriptor() protoreflect.EnumDescriptor {
	return file_wave_v1_domain_config_proto_enumTypes[7].Descriptor()
}

func (InputBus) Type() protoreflect.EnumType {
	return &file_wave_v1_domain_config_proto_enumTypes[7]
}

func (x InputBus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputBus.Descriptor instead.
func (InputBus) EnumDescriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{7}
}

type StorageType int32

const (
	StorageType_STORAGE_TYPE_UNSPECIFIED StorageType = 0
	StorageType_STORAGE_TYPE_CDROM       StorageType = 1
	StorageType_STORAGE_TYPE_DISK        StorageType = 2
)

// Enum value maps for StorageType.
var (
	StorageType_name = map[int32]string{
		0: "STORAGE_TYPE_UNSPECIFIED",
		1: "STORAGE_TYPE_CDROM",
		2: "STORAGE_TYPE_DISK",
	}
	StorageType_value = map[string]int32{
		"STORAGE_TYPE_UNSPECIFIED": 0,
		"STORAGE_TYPE_CDROM":       1,
		"STORAGE_TYPE_DISK":        2,
	}
)

func (x StorageType) Enum() *StorageType {
	p := new(StorageType)
	*p = x
	return p
}

func (x StorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_wave_v1_domain_config_proto_enumTypes[8].Descriptor()
}

func (StorageType) Type() protoreflect.EnumType {
	return &file_wave_v1_domain_config_proto_enumTypes[8]
}

func (x StorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageType.Descriptor instead.
func (StorageType) EnumDescriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{8}
}

type StorageBus int32

const (
	StorageBus_STORAGE_BUS_UNSPECIFIED StorageBus = 0
	StorageBus_STORAGE_BUS_IDE         StorageBus = 1
	StorageBus_STORAGE_BUS_SATA        StorageBus = 2
	StorageBus_STORAGE_BUS_VIRTIO      StorageBus = 3
)

// Enum value maps for StorageBus.
var (
	StorageBus_name = map[int32]string{
		0: "STORAGE_BUS_UNSPECIFIED",
		1: "STORAGE_BUS_IDE",
		2: "STORAGE_BUS_SATA",
		3: "STORAGE_BUS_VIRTIO",
	}
	StorageBus_value = map[string]int32{
		"STORAGE_BUS_UNSPECIFIED": 0,
		"STORAGE_BUS_IDE":         1,
		"STORAGE_BUS_SATA":        2,
		"STORAGE_BUS_VIRTIO":      3,
	}
)

func (x StorageBus) Enum() *StorageBus {
	p := new(StorageBus)
	*p = x
	return p
}

func (x StorageBus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageBus) Descriptor() protoreflect.EnumDescriptor {
	return file_wave_v1_domain_config_proto_enumTypes[9].Descriptor()
}

func (StorageBus) Type() protoreflect.EnumType {
	return &file_wave_v1_domain_config_proto_enumTypes[9]
}

func (x StorageBus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageBus.Descriptor instead.
func (StorageBus) EnumDescriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{9}
}

type NetworkBus int32

const (
	NetworkBus_NETWORK_BUS_UNSPECIFIED NetworkBus = 0
	NetworkBus_NETWORK_BUS_E1000       NetworkBus = 1
	NetworkBus_NETWORK_BUS_VIRTIO      NetworkBus = 2
)

// Enum value maps for NetworkBus.
var (
	NetworkBus_name = map[int32]string{
		0: "NETWORK_BUS_UNSPECIFIED",
		1: "NETWORK_BUS_E1000",
		2: "NETWORK_BUS_VIRTIO",
	}
	NetworkBus_value = map[string]int32{
		"NETWORK_BUS_UNSPECIFIED": 0,
		"NETWORK_BUS_E1000":       1,
		"NETWORK_BUS_VIRTIO":      2,
	}
)

func (x NetworkBus) Enum() *NetworkBus {
	p := new(NetworkBus)
	*p = x
	return p
}

func (x NetworkBus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkBus) Descriptor() protoreflect.EnumDescriptor {
	return file_wave_v1_domain_config_proto_enumTypes[10].Descriptor()
}

func (NetworkBus) Type() protoreflect.EnumType {
	return &file_wave_v1_domain_config_proto_enumTypes[10]
}

func (x NetworkBus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkBus.Descriptor instead.
func (NetworkBus) EnumDescriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{10}
}

type SystemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Architecture ArchOption    `protobuf:"varint,1,opt,name=architecture,proto3,enum=wave.v1.domain.ArchOption" json:"architecture,omitempty"`
	Chipset      ChipsetOption `protobuf:"varint,2,opt,name=chipset,proto3,enum=wave.v1.domain.ChipsetOption" json:"chipset,omitempty"`
}

func (x *SystemConfig) Reset() {
	*x = SystemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wave_v1_domain_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfig) ProtoMessage() {}

func (x *SystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wave_v1_domain_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConfig.ProtoReflect.Descriptor instead.
func (*SystemConfig) Descriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{0}
}

func (x *SystemConfig) GetArchitecture() ArchOption {
	if x != nil {
		return x.Architecture
	}
	return ArchOption_ARCH_OPTION_UNSPECIFIED
}

func (x *SystemConfig) GetChipset() ChipsetOption {
	if x != nil {
		return x.Chipset
	}
	return ChipsetOption_CHIPSET_OPTION_UNSPECIFIED
}

type FirmwareConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Firmware       FirmwareOption `protobuf:"varint,1,opt,name=firmware,proto3,enum=wave.v1.domain.FirmwareOption" json:"firmware,omitempty"`
	SecureBoot     bool           `protobuf:"varint,2,opt,name=secure_boot,json=secureBoot,proto3" json:"secure_boot,omitempty"`
	LoaderDeviceId string         `protobuf:"bytes,3,opt,name=loader_device_id,json=loaderDeviceId,proto3" json:"loader_device_id,omitempty"`
	TmplDeviceId   string         `protobuf:"bytes,4,opt,name=tmpl_device_id,json=tmplDeviceId,proto3" json:"tmpl_device_id,omitempty"`
	NvramDeviceId  string         `protobuf:"bytes,5,opt,name=nvram_device_id,json=nvramDeviceId,proto3" json:"nvram_device_id,omitempty"`
}

func (x *FirmwareConfig) Reset() {
	*x = FirmwareConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wave_v1_domain_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareConfig) ProtoMessage() {}

func (x *FirmwareConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wave_v1_domain_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareConfig.ProtoReflect.Descriptor instead.
func (*FirmwareConfig) Descriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{1}
}

func (x *FirmwareConfig) GetFirmware() FirmwareOption {
	if x != nil {
		return x.Firmware
	}
	return FirmwareOption_FIRMWARE_OPTION_UNSPECIFIED
}

func (x *FirmwareConfig) GetSecureBoot() bool {
	if x != nil {
		return x.SecureBoot
	}
	return false
}

func (x *FirmwareConfig) GetLoaderDeviceId() string {
	if x != nil {
		return x.LoaderDeviceId
	}
	return ""
}

func (x *FirmwareConfig) GetTmplDeviceId() string {
	if x != nil {
		return x.TmplDeviceId
	}
	return ""
}

func (x *FirmwareConfig) GetNvramDeviceId() string {
	if x != nil {
		return x.NvramDeviceId
	}
	return ""
}

type ResourceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vcpus  int64 `protobuf:"varint,1,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	Memory int64 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *ResourceConfig) Reset() {
	*x = ResourceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wave_v1_domain_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceConfig) ProtoMessage() {}

func (x *ResourceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wave_v1_domain_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceConfig.ProtoReflect.Descriptor instead.
func (*ResourceConfig) Descriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceConfig) GetVcpus() int64 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *ResourceConfig) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type VideoDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoOption       VideoOption `protobuf:"varint,1,opt,name=video_option,json=videoOption,proto3,enum=wave.v1.domain.VideoOption" json:"video_option,omitempty"`
	CommandbufferSize int64       `protobuf:"varint,2,opt,name=commandbuffer_size,json=commandbufferSize,proto3" json:"commandbuffer_size,omitempty"`
	VideobufferSize   int64       `protobuf:"varint,3,opt,name=videobuffer_size,json=videobufferSize,proto3" json:"videobuffer_size,omitempty"`
	FramebufferSize   int64       `protobuf:"varint,4,opt,name=framebuffer_size,json=framebufferSize,proto3" json:"framebuffer_size,omitempty"`
}

func (x *VideoDevice) Reset() {
	*x = VideoDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wave_v1_domain_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoDevice) ProtoMessage() {}

func (x *VideoDevice) ProtoReflect() protoreflect.Message {
	mi := &file_wave_v1_domain_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoDevice.ProtoReflect.Descriptor instead.
func (*VideoDevice) Descriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{3}
}

func (x *VideoDevice) GetVideoOption() VideoOption {
	if x != nil {
		return x.VideoOption
	}
	return VideoOption_VIDEO_OPTION_UNSPECIFIED
}

func (x *VideoDevice) GetCommandbufferSize() int64 {
	if x != nil {
		return x.CommandbufferSize
	}
	return 0
}

func (x *VideoDevice) GetVideobufferSize() int64 {
	if x != nil {
		return x.VideobufferSize
	}
	return 0
}

func (x *VideoDevice) GetFramebufferSize() int64 {
	if x != nil {
		return x.FramebufferSize
	}
	return 0
}

type VideoAdapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *VideoAdapter) Reset() {
	*x = VideoAdapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wave_v1_domain_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoAdapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoAdapter) ProtoMessage() {}

func (x *VideoAdapter) ProtoReflect() protoreflect.Message {
	mi := &file_wave_v1_domain_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoAdapter.ProtoReflect.Descriptor instead.
func (*VideoAdapter) Descriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{4}
}

func (x *VideoAdapter) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type SerialDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId  string    `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	SerialBus SerialBus `protobuf:"varint,2,opt,name=serial_bus,json=serialBus,proto3,enum=wave.v1.domain.SerialBus" json:"serial_bus,omitempty"`
	Port      int64     `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *SerialDevice) Reset() {
	*x = SerialDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wave_v1_domain_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerialDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialDevice) ProtoMessage() {}

func (x *SerialDevice) ProtoReflect() protoreflect.Message {
	mi := &file_wave_v1_domain_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialDevice.ProtoReflect.Descriptor instead.
func (*SerialDevice) Descriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{5}
}

func (x *SerialDevice) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SerialDevice) GetSerialBus() SerialBus {
	if x != nil {
		return x.SerialBus
	}
	return SerialBus_SERIAL_BUS_UNSPECIFIED
}

func (x *SerialDevice) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

type InputDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputType InputType `protobuf:"varint,1,opt,name=input_type,json=inputType,proto3,enum=wave.v1.domain.InputType" json:"input_type,omitempty"`
	InputBus  InputBus  `protobuf:"varint,2,opt,name=input_bus,json=inputBus,proto3,enum=wave.v1.domain.InputBus" json:"input_bus,omitempty"`
}

func (x *InputDevice) Reset() {
	*x = InputDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wave_v1_domain_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputDevice) ProtoMessage() {}

func (x *InputDevice) ProtoReflect() protoreflect.Message {
	mi := &file_wave_v1_domain_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputDevice.ProtoReflect.Descriptor instead.
func (*InputDevice) Descriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{6}
}

func (x *InputDevice) GetInputType() InputType {
	if x != nil {
		return x.InputType
	}
	return InputType_INPUT_TYPE_UNSPECIFIED
}

func (x *InputDevice) GetInputBus() InputBus {
	if x != nil {
		return x.InputBus
	}
	return InputBus_INPUT_BUS_UNSPECIFIED
}

type StorageDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId     string      `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	StorageType  StorageType `protobuf:"varint,2,opt,name=storage_type,json=storageType,proto3,enum=wave.v1.domain.StorageType" json:"storage_type,omitempty"`
	StorageBus   StorageBus  `protobuf:"varint,3,opt,name=storage_bus,json=storageBus,proto3,enum=wave.v1.domain.StorageBus" json:"storage_bus,omitempty"`
	BootPriority int64       `protobuf:"varint,4,opt,name=boot_priority,json=bootPriority,proto3" json:"boot_priority,omitempty"`
}

func (x *StorageDevice) Reset() {
	*x = StorageDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wave_v1_domain_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageDevice) ProtoMessage() {}

func (x *StorageDevice) ProtoReflect() protoreflect.Message {
	mi := &file_wave_v1_domain_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageDevice.ProtoReflect.Descriptor instead.
func (*StorageDevice) Descriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{7}
}

func (x *StorageDevice) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *StorageDevice) GetStorageType() StorageType {
	if x != nil {
		return x.StorageType
	}
	return StorageType_STORAGE_TYPE_UNSPECIFIED
}

func (x *StorageDevice) GetStorageBus() StorageBus {
	if x != nil {
		return x.StorageBus
	}
	return StorageBus_STORAGE_BUS_UNSPECIFIED
}

func (x *StorageDevice) GetBootPriority() int64 {
	if x != nil {
		return x.BootPriority
	}
	return 0
}

type NetworkDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId     string     `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	NetworkBus   NetworkBus `protobuf:"varint,2,opt,name=network_bus,json=networkBus,proto3,enum=wave.v1.domain.NetworkBus" json:"network_bus,omitempty"`
	BootPriority int64      `protobuf:"varint,3,opt,name=boot_priority,json=bootPriority,proto3" json:"boot_priority,omitempty"`
}

func (x *NetworkDevice) Reset() {
	*x = NetworkDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wave_v1_domain_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkDevice) ProtoMessage() {}

func (x *NetworkDevice) ProtoReflect() protoreflect.Message {
	mi := &file_wave_v1_domain_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkDevice.ProtoReflect.Descriptor instead.
func (*NetworkDevice) Descriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{8}
}

func (x *NetworkDevice) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *NetworkDevice) GetNetworkBus() NetworkBus {
	if x != nil {
		return x.NetworkBus
	}
	return NetworkBus_NETWORK_BUS_UNSPECIFIED
}

func (x *NetworkDevice) GetBootPriority() int64 {
	if x != nil {
		return x.BootPriority
	}
	return 0
}

// DomainConfig represents a cthul domain. This format is used by the underlying domain controller
// to build up the vendor specific config (e.g. libvirt xml).
type DomainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title          string           `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description    string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	State          DomainState      `protobuf:"varint,4,opt,name=state,proto3,enum=wave.v1.domain.DomainState" json:"state,omitempty"`
	Affinity       []string         `protobuf:"bytes,5,rep,name=affinity,proto3" json:"affinity,omitempty"`
	SystemConfig   *SystemConfig    `protobuf:"bytes,6,opt,name=system_config,json=systemConfig,proto3" json:"system_config,omitempty"`
	FirmwareConfig *FirmwareConfig  `protobuf:"bytes,7,opt,name=firmware_config,json=firmwareConfig,proto3" json:"firmware_config,omitempty"`
	ResourceConfig *ResourceConfig  `protobuf:"bytes,8,opt,name=resource_config,json=resourceConfig,proto3" json:"resource_config,omitempty"`
	VideoDevices   []*VideoDevice   `protobuf:"bytes,9,rep,name=video_devices,json=videoDevices,proto3" json:"video_devices,omitempty"`
	VideoAdapters  []*VideoAdapter  `protobuf:"bytes,10,rep,name=video_adapters,json=videoAdapters,proto3" json:"video_adapters,omitempty"`
	InputDevices   []*InputDevice   `protobuf:"bytes,11,rep,name=input_devices,json=inputDevices,proto3" json:"input_devices,omitempty"`
	SerialDevices  []*SerialDevice  `protobuf:"bytes,12,rep,name=serial_devices,json=serialDevices,proto3" json:"serial_devices,omitempty"`
	StorageDevices []*StorageDevice `protobuf:"bytes,13,rep,name=storage_devices,json=storageDevices,proto3" json:"storage_devices,omitempty"`
	NetworkDevices []*NetworkDevice `protobuf:"bytes,14,rep,name=network_devices,json=networkDevices,proto3" json:"network_devices,omitempty"`
}

func (x *DomainConfig) Reset() {
	*x = DomainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wave_v1_domain_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainConfig) ProtoMessage() {}

func (x *DomainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wave_v1_domain_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainConfig.ProtoReflect.Descriptor instead.
func (*DomainConfig) Descriptor() ([]byte, []int) {
	return file_wave_v1_domain_config_proto_rawDescGZIP(), []int{9}
}

func (x *DomainConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainConfig) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DomainConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DomainConfig) GetState() DomainState {
	if x != nil {
		return x.State
	}
	return DomainState_DOMAIN_STATE_UNSPECIFIED
}

func (x *DomainConfig) GetAffinity() []string {
	if x != nil {
		return x.Affinity
	}
	return nil
}

func (x *DomainConfig) GetSystemConfig() *SystemConfig {
	if x != nil {
		return x.SystemConfig
	}
	return nil
}

func (x *DomainConfig) GetFirmwareConfig() *FirmwareConfig {
	if x != nil {
		return x.FirmwareConfig
	}
	return nil
}

func (x *DomainConfig) GetResourceConfig() *ResourceConfig {
	if x != nil {
		return x.ResourceConfig
	}
	return nil
}

func (x *DomainConfig) GetVideoDevices() []*VideoDevice {
	if x != nil {
		return x.VideoDevices
	}
	return nil
}

func (x *DomainConfig) GetVideoAdapters() []*VideoAdapter {
	if x != nil {
		return x.VideoAdapters
	}
	return nil
}

func (x *DomainConfig) GetInputDevices() []*InputDevice {
	if x != nil {
		return x.InputDevices
	}
	return nil
}

func (x *DomainConfig) GetSerialDevices() []*SerialDevice {
	if x != nil {
		return x.SerialDevices
	}
	return nil
}

func (x *DomainConfig) GetStorageDevices() []*StorageDevice {
	if x != nil {
		return x.StorageDevices
	}
	return nil
}

func (x *DomainConfig) GetNetworkDevices() []*NetworkDevice {
	if x != nil {
		return x.NetworkDevices
	}
	return nil
}

var File_wave_v1_domain_config_proto protoreflect.FileDescriptor

var file_wave_v1_domain_config_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x77, 0x61, 0x76, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x77,
	0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x87, 0x01,
	0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e,
	0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x63, 0x68, 0x69, 0x70, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x63, 0x68, 0x69, 0x70, 0x73, 0x65, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x08, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x77,
	0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6d, 0x70, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6d, 0x70, 0x6c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x76, 0x72, 0x61, 0x6d,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x76, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x3e, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22,
	0xd2, 0x01, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3e, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x2b, 0x0a, 0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x79, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x7e, 0x0a, 0x0b,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42,
	0x75, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75, 0x73, 0x22, 0xce, 0x01, 0x0a,
	0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x8e, 0x01,
	0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x75, 0x73, 0x52, 0x0a, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x9c,
	0x06, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x77, 0x61, 0x76,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a,
	0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x40, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x43, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x61, 0x76, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2a, 0x8d, 0x01,
	0x0a, 0x0b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x44, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x2a, 0x59, 0x0a,
	0x0a, 0x41, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4d, 0x44, 0x36, 0x34, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x41, 0x52, 0x43, 0x48, 0x36, 0x34, 0x10, 0x02, 0x2a, 0x7b, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x70,
	0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x49,
	0x50, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x49,
	0x50, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x34, 0x34, 0x30,
	0x46, 0x58, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x49, 0x50, 0x53, 0x45, 0x54, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x33, 0x35, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x48, 0x49, 0x50, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56,
	0x49, 0x52, 0x54, 0x10, 0x03, 0x2a, 0x68, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x52, 0x4d, 0x57,
	0x41, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x52, 0x4d,
	0x57, 0x41, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x56, 0x4d, 0x46,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x42, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x2a,
	0x85, 0x01, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x18, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x47,
	0x41, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x58, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x2a, 0x52, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x42, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x42,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x42, 0x55, 0x53, 0x5f, 0x49,
	0x53, 0x41, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x42,
	0x55, 0x53, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x49, 0x4f, 0x10, 0x02, 0x2a, 0x6d, 0x0a, 0x09, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4b, 0x45, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x03, 0x2a, 0x61, 0x0a, 0x08, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x42, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f,
	0x42, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x42, 0x55, 0x53, 0x5f, 0x50,
	0x53, 0x32, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x42, 0x55,
	0x53, 0x5f, 0x55, 0x53, 0x42, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x5f, 0x42, 0x55, 0x53, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x49, 0x4f, 0x10, 0x03, 0x2a, 0x5a, 0x0a,
	0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x44, 0x52, 0x4f, 0x4d,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x0a, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x42, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x5f, 0x53, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x5f, 0x56,
	0x49, 0x52, 0x54, 0x49, 0x4f, 0x10, 0x03, 0x2a, 0x58, 0x0a, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x42, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x42, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x55,
	0x53, 0x5f, 0x45, 0x31, 0x30, 0x30, 0x30, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x55, 0x53, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x49, 0x4f, 0x10,
	0x02, 0x42, 0x27, 0x5a, 0x25, 0x63, 0x74, 0x68, 0x75, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x74,
	0x68, 0x75, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61, 0x76, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_wave_v1_domain_config_proto_rawDescOnce sync.Once
	file_wave_v1_domain_config_proto_rawDescData = file_wave_v1_domain_config_proto_rawDesc
)

func file_wave_v1_domain_config_proto_rawDescGZIP() []byte {
	file_wave_v1_domain_config_proto_rawDescOnce.Do(func() {
		file_wave_v1_domain_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_wave_v1_domain_config_proto_rawDescData)
	})
	return file_wave_v1_domain_config_proto_rawDescData
}

var file_wave_v1_domain_config_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_wave_v1_domain_config_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_wave_v1_domain_config_proto_goTypes = []any{
	(DomainState)(0),       // 0: wave.v1.domain.DomainState
	(ArchOption)(0),        // 1: wave.v1.domain.ArchOption
	(ChipsetOption)(0),     // 2: wave.v1.domain.ChipsetOption
	(FirmwareOption)(0),    // 3: wave.v1.domain.FirmwareOption
	(VideoOption)(0),       // 4: wave.v1.domain.VideoOption
	(SerialBus)(0),         // 5: wave.v1.domain.SerialBus
	(InputType)(0),         // 6: wave.v1.domain.InputType
	(InputBus)(0),          // 7: wave.v1.domain.InputBus
	(StorageType)(0),       // 8: wave.v1.domain.StorageType
	(StorageBus)(0),        // 9: wave.v1.domain.StorageBus
	(NetworkBus)(0),        // 10: wave.v1.domain.NetworkBus
	(*SystemConfig)(nil),   // 11: wave.v1.domain.SystemConfig
	(*FirmwareConfig)(nil), // 12: wave.v1.domain.FirmwareConfig
	(*ResourceConfig)(nil), // 13: wave.v1.domain.ResourceConfig
	(*VideoDevice)(nil),    // 14: wave.v1.domain.VideoDevice
	(*VideoAdapter)(nil),   // 15: wave.v1.domain.VideoAdapter
	(*SerialDevice)(nil),   // 16: wave.v1.domain.SerialDevice
	(*InputDevice)(nil),    // 17: wave.v1.domain.InputDevice
	(*StorageDevice)(nil),  // 18: wave.v1.domain.StorageDevice
	(*NetworkDevice)(nil),  // 19: wave.v1.domain.NetworkDevice
	(*DomainConfig)(nil),   // 20: wave.v1.domain.DomainConfig
}
var file_wave_v1_domain_config_proto_depIdxs = []int32{
	1,  // 0: wave.v1.domain.SystemConfig.architecture:type_name -> wave.v1.domain.ArchOption
	2,  // 1: wave.v1.domain.SystemConfig.chipset:type_name -> wave.v1.domain.ChipsetOption
	3,  // 2: wave.v1.domain.FirmwareConfig.firmware:type_name -> wave.v1.domain.FirmwareOption
	4,  // 3: wave.v1.domain.VideoDevice.video_option:type_name -> wave.v1.domain.VideoOption
	5,  // 4: wave.v1.domain.SerialDevice.serial_bus:type_name -> wave.v1.domain.SerialBus
	6,  // 5: wave.v1.domain.InputDevice.input_type:type_name -> wave.v1.domain.InputType
	7,  // 6: wave.v1.domain.InputDevice.input_bus:type_name -> wave.v1.domain.InputBus
	8,  // 7: wave.v1.domain.StorageDevice.storage_type:type_name -> wave.v1.domain.StorageType
	9,  // 8: wave.v1.domain.StorageDevice.storage_bus:type_name -> wave.v1.domain.StorageBus
	10, // 9: wave.v1.domain.NetworkDevice.network_bus:type_name -> wave.v1.domain.NetworkBus
	0,  // 10: wave.v1.domain.DomainConfig.state:type_name -> wave.v1.domain.DomainState
	11, // 11: wave.v1.domain.DomainConfig.system_config:type_name -> wave.v1.domain.SystemConfig
	12, // 12: wave.v1.domain.DomainConfig.firmware_config:type_name -> wave.v1.domain.FirmwareConfig
	13, // 13: wave.v1.domain.DomainConfig.resource_config:type_name -> wave.v1.domain.ResourceConfig
	14, // 14: wave.v1.domain.DomainConfig.video_devices:type_name -> wave.v1.domain.VideoDevice
	15, // 15: wave.v1.domain.DomainConfig.video_adapters:type_name -> wave.v1.domain.VideoAdapter
	17, // 16: wave.v1.domain.DomainConfig.input_devices:type_name -> wave.v1.domain.InputDevice
	16, // 17: wave.v1.domain.DomainConfig.serial_devices:type_name -> wave.v1.domain.SerialDevice
	18, // 18: wave.v1.domain.DomainConfig.storage_devices:type_name -> wave.v1.domain.StorageDevice
	19, // 19: wave.v1.domain.DomainConfig.network_devices:type_name -> wave.v1.domain.NetworkDevice
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_wave_v1_domain_config_proto_init() }
func file_wave_v1_domain_config_proto_init() {
	if File_wave_v1_domain_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wave_v1_domain_config_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SystemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wave_v1_domain_config_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FirmwareConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wave_v1_domain_config_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wave_v1_domain_config_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*VideoDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wave_v1_domain_config_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*VideoAdapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wave_v1_domain_config_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SerialDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wave_v1_domain_config_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*InputDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wave_v1_domain_config_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*StorageDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wave_v1_domain_config_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wave_v1_domain_config_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DomainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wave_v1_domain_config_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wave_v1_domain_config_proto_goTypes,
		DependencyIndexes: file_wave_v1_domain_config_proto_depIdxs,
		EnumInfos:         file_wave_v1_domain_config_proto_enumTypes,
		MessageInfos:      file_wave_v1_domain_config_proto_msgTypes,
	}.Build()
	File_wave_v1_domain_config_proto = out.File
	file_wave_v1_domain_config_proto_rawDesc = nil
	file_wave_v1_domain_config_proto_goTypes = nil
	file_wave_v1_domain_config_proto_depIdxs = nil
}
