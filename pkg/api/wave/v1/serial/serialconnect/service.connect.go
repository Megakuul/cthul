// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wave/v1/serial/service.proto

package serialconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	serial "cthul.io/cthul/pkg/api/wave/v1/serial"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SerialServiceName is the fully-qualified name of the SerialService service.
	SerialServiceName = "wave.v1.serial.SerialService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SerialServiceGetProcedure is the fully-qualified name of the SerialService's Get RPC.
	SerialServiceGetProcedure = "/wave.v1.serial.SerialService/Get"
	// SerialServiceListProcedure is the fully-qualified name of the SerialService's List RPC.
	SerialServiceListProcedure = "/wave.v1.serial.SerialService/List"
	// SerialServiceCreateProcedure is the fully-qualified name of the SerialService's Create RPC.
	SerialServiceCreateProcedure = "/wave.v1.serial.SerialService/Create"
	// SerialServiceUpdateProcedure is the fully-qualified name of the SerialService's Update RPC.
	SerialServiceUpdateProcedure = "/wave.v1.serial.SerialService/Update"
	// SerialServiceDeleteProcedure is the fully-qualified name of the SerialService's Delete RPC.
	SerialServiceDeleteProcedure = "/wave.v1.serial.SerialService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serialServiceServiceDescriptor      = serial.File_wave_v1_serial_service_proto.Services().ByName("SerialService")
	serialServiceGetMethodDescriptor    = serialServiceServiceDescriptor.Methods().ByName("Get")
	serialServiceListMethodDescriptor   = serialServiceServiceDescriptor.Methods().ByName("List")
	serialServiceCreateMethodDescriptor = serialServiceServiceDescriptor.Methods().ByName("Create")
	serialServiceUpdateMethodDescriptor = serialServiceServiceDescriptor.Methods().ByName("Update")
	serialServiceDeleteMethodDescriptor = serialServiceServiceDescriptor.Methods().ByName("Delete")
)

// SerialServiceClient is a client for the wave.v1.serial.SerialService service.
type SerialServiceClient interface {
	Get(context.Context, *connect.Request[serial.GetRequest]) (*connect.Response[serial.GetResponse], error)
	List(context.Context, *connect.Request[serial.ListRequest]) (*connect.Response[serial.ListResponse], error)
	Create(context.Context, *connect.Request[serial.CreateRequest]) (*connect.Response[serial.CreateResponse], error)
	Update(context.Context, *connect.Request[serial.UpdateRequest]) (*connect.Response[serial.UpdateResponse], error)
	Delete(context.Context, *connect.Request[serial.DeleteRequest]) (*connect.Response[serial.DeleteResponse], error)
}

// NewSerialServiceClient constructs a client for the wave.v1.serial.SerialService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSerialServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SerialServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serialServiceClient{
		get: connect.NewClient[serial.GetRequest, serial.GetResponse](
			httpClient,
			baseURL+SerialServiceGetProcedure,
			connect.WithSchema(serialServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[serial.ListRequest, serial.ListResponse](
			httpClient,
			baseURL+SerialServiceListProcedure,
			connect.WithSchema(serialServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[serial.CreateRequest, serial.CreateResponse](
			httpClient,
			baseURL+SerialServiceCreateProcedure,
			connect.WithSchema(serialServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[serial.UpdateRequest, serial.UpdateResponse](
			httpClient,
			baseURL+SerialServiceUpdateProcedure,
			connect.WithSchema(serialServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[serial.DeleteRequest, serial.DeleteResponse](
			httpClient,
			baseURL+SerialServiceDeleteProcedure,
			connect.WithSchema(serialServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serialServiceClient implements SerialServiceClient.
type serialServiceClient struct {
	get    *connect.Client[serial.GetRequest, serial.GetResponse]
	list   *connect.Client[serial.ListRequest, serial.ListResponse]
	create *connect.Client[serial.CreateRequest, serial.CreateResponse]
	update *connect.Client[serial.UpdateRequest, serial.UpdateResponse]
	delete *connect.Client[serial.DeleteRequest, serial.DeleteResponse]
}

// Get calls wave.v1.serial.SerialService.Get.
func (c *serialServiceClient) Get(ctx context.Context, req *connect.Request[serial.GetRequest]) (*connect.Response[serial.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls wave.v1.serial.SerialService.List.
func (c *serialServiceClient) List(ctx context.Context, req *connect.Request[serial.ListRequest]) (*connect.Response[serial.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Create calls wave.v1.serial.SerialService.Create.
func (c *serialServiceClient) Create(ctx context.Context, req *connect.Request[serial.CreateRequest]) (*connect.Response[serial.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls wave.v1.serial.SerialService.Update.
func (c *serialServiceClient) Update(ctx context.Context, req *connect.Request[serial.UpdateRequest]) (*connect.Response[serial.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls wave.v1.serial.SerialService.Delete.
func (c *serialServiceClient) Delete(ctx context.Context, req *connect.Request[serial.DeleteRequest]) (*connect.Response[serial.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// SerialServiceHandler is an implementation of the wave.v1.serial.SerialService service.
type SerialServiceHandler interface {
	Get(context.Context, *connect.Request[serial.GetRequest]) (*connect.Response[serial.GetResponse], error)
	List(context.Context, *connect.Request[serial.ListRequest]) (*connect.Response[serial.ListResponse], error)
	Create(context.Context, *connect.Request[serial.CreateRequest]) (*connect.Response[serial.CreateResponse], error)
	Update(context.Context, *connect.Request[serial.UpdateRequest]) (*connect.Response[serial.UpdateResponse], error)
	Delete(context.Context, *connect.Request[serial.DeleteRequest]) (*connect.Response[serial.DeleteResponse], error)
}

// NewSerialServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSerialServiceHandler(svc SerialServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serialServiceGetHandler := connect.NewUnaryHandler(
		SerialServiceGetProcedure,
		svc.Get,
		connect.WithSchema(serialServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serialServiceListHandler := connect.NewUnaryHandler(
		SerialServiceListProcedure,
		svc.List,
		connect.WithSchema(serialServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serialServiceCreateHandler := connect.NewUnaryHandler(
		SerialServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(serialServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serialServiceUpdateHandler := connect.NewUnaryHandler(
		SerialServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(serialServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serialServiceDeleteHandler := connect.NewUnaryHandler(
		SerialServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(serialServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/wave.v1.serial.SerialService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SerialServiceGetProcedure:
			serialServiceGetHandler.ServeHTTP(w, r)
		case SerialServiceListProcedure:
			serialServiceListHandler.ServeHTTP(w, r)
		case SerialServiceCreateProcedure:
			serialServiceCreateHandler.ServeHTTP(w, r)
		case SerialServiceUpdateProcedure:
			serialServiceUpdateHandler.ServeHTTP(w, r)
		case SerialServiceDeleteProcedure:
			serialServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSerialServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSerialServiceHandler struct{}

func (UnimplementedSerialServiceHandler) Get(context.Context, *connect.Request[serial.GetRequest]) (*connect.Response[serial.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.serial.SerialService.Get is not implemented"))
}

func (UnimplementedSerialServiceHandler) List(context.Context, *connect.Request[serial.ListRequest]) (*connect.Response[serial.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.serial.SerialService.List is not implemented"))
}

func (UnimplementedSerialServiceHandler) Create(context.Context, *connect.Request[serial.CreateRequest]) (*connect.Response[serial.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.serial.SerialService.Create is not implemented"))
}

func (UnimplementedSerialServiceHandler) Update(context.Context, *connect.Request[serial.UpdateRequest]) (*connect.Response[serial.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.serial.SerialService.Update is not implemented"))
}

func (UnimplementedSerialServiceHandler) Delete(context.Context, *connect.Request[serial.DeleteRequest]) (*connect.Response[serial.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wave.v1.serial.SerialService.Delete is not implemented"))
}
