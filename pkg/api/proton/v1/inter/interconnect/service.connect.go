// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proton/v1/inter/service.proto

package interconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	inter "cthul.io/cthul/pkg/api/proton/v1/inter"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InterServiceName is the fully-qualified name of the InterService service.
	InterServiceName = "proton.v1.inter.InterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InterServiceGetProcedure is the fully-qualified name of the InterService's Get RPC.
	InterServiceGetProcedure = "/proton.v1.inter.InterService/Get"
	// InterServiceListProcedure is the fully-qualified name of the InterService's List RPC.
	InterServiceListProcedure = "/proton.v1.inter.InterService/List"
	// InterServiceCreateProcedure is the fully-qualified name of the InterService's Create RPC.
	InterServiceCreateProcedure = "/proton.v1.inter.InterService/Create"
	// InterServiceUpdateProcedure is the fully-qualified name of the InterService's Update RPC.
	InterServiceUpdateProcedure = "/proton.v1.inter.InterService/Update"
	// InterServiceDeleteProcedure is the fully-qualified name of the InterService's Delete RPC.
	InterServiceDeleteProcedure = "/proton.v1.inter.InterService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	interServiceServiceDescriptor      = inter.File_proton_v1_inter_service_proto.Services().ByName("InterService")
	interServiceGetMethodDescriptor    = interServiceServiceDescriptor.Methods().ByName("Get")
	interServiceListMethodDescriptor   = interServiceServiceDescriptor.Methods().ByName("List")
	interServiceCreateMethodDescriptor = interServiceServiceDescriptor.Methods().ByName("Create")
	interServiceUpdateMethodDescriptor = interServiceServiceDescriptor.Methods().ByName("Update")
	interServiceDeleteMethodDescriptor = interServiceServiceDescriptor.Methods().ByName("Delete")
)

// InterServiceClient is a client for the proton.v1.inter.InterService service.
type InterServiceClient interface {
	Get(context.Context, *connect.Request[inter.GetRequest]) (*connect.Response[inter.GetResponse], error)
	List(context.Context, *connect.Request[inter.ListRequest]) (*connect.Response[inter.ListResponse], error)
	Create(context.Context, *connect.Request[inter.CreateRequest]) (*connect.Response[inter.CreateResponse], error)
	Update(context.Context, *connect.Request[inter.UpdateRequest]) (*connect.Response[inter.UpdateResponse], error)
	Delete(context.Context, *connect.Request[inter.DeleteRequest]) (*connect.Response[inter.DeleteResponse], error)
}

// NewInterServiceClient constructs a client for the proton.v1.inter.InterService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &interServiceClient{
		get: connect.NewClient[inter.GetRequest, inter.GetResponse](
			httpClient,
			baseURL+InterServiceGetProcedure,
			connect.WithSchema(interServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[inter.ListRequest, inter.ListResponse](
			httpClient,
			baseURL+InterServiceListProcedure,
			connect.WithSchema(interServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[inter.CreateRequest, inter.CreateResponse](
			httpClient,
			baseURL+InterServiceCreateProcedure,
			connect.WithSchema(interServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[inter.UpdateRequest, inter.UpdateResponse](
			httpClient,
			baseURL+InterServiceUpdateProcedure,
			connect.WithSchema(interServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[inter.DeleteRequest, inter.DeleteResponse](
			httpClient,
			baseURL+InterServiceDeleteProcedure,
			connect.WithSchema(interServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// interServiceClient implements InterServiceClient.
type interServiceClient struct {
	get    *connect.Client[inter.GetRequest, inter.GetResponse]
	list   *connect.Client[inter.ListRequest, inter.ListResponse]
	create *connect.Client[inter.CreateRequest, inter.CreateResponse]
	update *connect.Client[inter.UpdateRequest, inter.UpdateResponse]
	delete *connect.Client[inter.DeleteRequest, inter.DeleteResponse]
}

// Get calls proton.v1.inter.InterService.Get.
func (c *interServiceClient) Get(ctx context.Context, req *connect.Request[inter.GetRequest]) (*connect.Response[inter.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls proton.v1.inter.InterService.List.
func (c *interServiceClient) List(ctx context.Context, req *connect.Request[inter.ListRequest]) (*connect.Response[inter.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Create calls proton.v1.inter.InterService.Create.
func (c *interServiceClient) Create(ctx context.Context, req *connect.Request[inter.CreateRequest]) (*connect.Response[inter.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls proton.v1.inter.InterService.Update.
func (c *interServiceClient) Update(ctx context.Context, req *connect.Request[inter.UpdateRequest]) (*connect.Response[inter.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls proton.v1.inter.InterService.Delete.
func (c *interServiceClient) Delete(ctx context.Context, req *connect.Request[inter.DeleteRequest]) (*connect.Response[inter.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// InterServiceHandler is an implementation of the proton.v1.inter.InterService service.
type InterServiceHandler interface {
	Get(context.Context, *connect.Request[inter.GetRequest]) (*connect.Response[inter.GetResponse], error)
	List(context.Context, *connect.Request[inter.ListRequest]) (*connect.Response[inter.ListResponse], error)
	Create(context.Context, *connect.Request[inter.CreateRequest]) (*connect.Response[inter.CreateResponse], error)
	Update(context.Context, *connect.Request[inter.UpdateRequest]) (*connect.Response[inter.UpdateResponse], error)
	Delete(context.Context, *connect.Request[inter.DeleteRequest]) (*connect.Response[inter.DeleteResponse], error)
}

// NewInterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInterServiceHandler(svc InterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	interServiceGetHandler := connect.NewUnaryHandler(
		InterServiceGetProcedure,
		svc.Get,
		connect.WithSchema(interServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	interServiceListHandler := connect.NewUnaryHandler(
		InterServiceListProcedure,
		svc.List,
		connect.WithSchema(interServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	interServiceCreateHandler := connect.NewUnaryHandler(
		InterServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(interServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	interServiceUpdateHandler := connect.NewUnaryHandler(
		InterServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(interServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	interServiceDeleteHandler := connect.NewUnaryHandler(
		InterServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(interServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proton.v1.inter.InterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InterServiceGetProcedure:
			interServiceGetHandler.ServeHTTP(w, r)
		case InterServiceListProcedure:
			interServiceListHandler.ServeHTTP(w, r)
		case InterServiceCreateProcedure:
			interServiceCreateHandler.ServeHTTP(w, r)
		case InterServiceUpdateProcedure:
			interServiceUpdateHandler.ServeHTTP(w, r)
		case InterServiceDeleteProcedure:
			interServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInterServiceHandler struct{}

func (UnimplementedInterServiceHandler) Get(context.Context, *connect.Request[inter.GetRequest]) (*connect.Response[inter.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proton.v1.inter.InterService.Get is not implemented"))
}

func (UnimplementedInterServiceHandler) List(context.Context, *connect.Request[inter.ListRequest]) (*connect.Response[inter.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proton.v1.inter.InterService.List is not implemented"))
}

func (UnimplementedInterServiceHandler) Create(context.Context, *connect.Request[inter.CreateRequest]) (*connect.Response[inter.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proton.v1.inter.InterService.Create is not implemented"))
}

func (UnimplementedInterServiceHandler) Update(context.Context, *connect.Request[inter.UpdateRequest]) (*connect.Response[inter.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proton.v1.inter.InterService.Update is not implemented"))
}

func (UnimplementedInterServiceHandler) Delete(context.Context, *connect.Request[inter.DeleteRequest]) (*connect.Response[inter.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proton.v1.inter.InterService.Delete is not implemented"))
}
